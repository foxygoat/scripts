#!/usr/bin/env bash
#
# Download the binary archive of the latest Go toolchain and install it
# if it is not already installed.
#
# Usage:
# getgo [stable|prerelease]
#
# The default is "stable" if no release specified.
#-----------------------------------------------------------------------------
#
# Where the Go toolchain is installed
BASE_DIR=/opt/go

: "${GETGO_DEBUG:=0}"
: "${GETGO_DRYRUN:=0}"

#-----------------------------------------------------------------------------
main() {
	set -euo pipefail
	declare -A info
	local release="${1-stable}"

	checkdeps

	infovars="$(get_latest_info "${release}")"
	while IFS='=' read -r key value; do
		[[ -n "${key}" ]] || continue
		info["${key}"]="${value}"
	done <<<"${infovars}"

	if [[ -z "${info[version]-}" ]]; then
		if [[ "${release}" == 'prerelease' ]]; then
			printf 'No prerelease releases available\n'
			exit 0
		fi
		errexit 'No version returned when querying Go download server. Sorry\n'
	fi

	if [[ -z "${info[filename]-}" ]]; then
		errexit 'No filename returned by Go download server for version %s. Sorry\n' "${info[version]}"
	fi

	if ! [[ "${info[version]}" =~ go(.*) ]]; then
		errexit 'Unknown version format returned by Go download server: %s\n' "${info[version]}"
	fi

	version="${BASH_REMATCH[1]}"
	install_dir="${BASE_DIR}/${version}"
	if [[ -e "${install_dir}" ]]; then
		printf '%s version %s is up to date\n' "${release}" "${version}"
		exit 0
	fi

	printf 'Downloading latest %s version %s\n' "${release}" "${version}"
	mkdir "${install_dir}"
	run curl -sL -o - "https://golang.org/dl/${info[filename]}" |
		run tar -C "${install_dir}" -x -z --strip-components=1
	run ln -nsf "${version}" "${BASE_DIR}/${release}"
}

#-----------------------------------------------------------------------------
checkdeps() {
	if ((BASH_VERSINFO[0] < 4)); then
		errexit 'This script requires bash 4 or later'
	fi

	if ! which jq >/dev/null 2>&1; then
		errexit 'jq is required'
	fi

	if ! which curl >/dev/null 2>&1; then
		errexit 'curl is required'
	fi
}

#-----------------------------------------------------------------------------
get_latest_info() {
	local os arch
	case $(uname) in
	Linux) os=linux ;;
	Darwin) os=darwin ;;
	*) errexit 'Unknown OS name: %s\n' "$(uname)" ;;
	esac

	case $(uname -m) in
	x86_64) arch=amd64 ;;
	arm64 | aarch64) arch=arm64 ;;
	arm*) arch=armv6l ;;
	*) errexit 'Unknown architecture: %s\n' "$(uname -m)" ;;
	esac

	local qp='' select_release=''
	local select_file="select(.kind == \"archive\" and .os == \"${os}\" and .arch == \"${arch}\")"
	local to_key_val='to_entries | .[] | .key + "=" + (.value | tostring)'

	case "${1-}" in
	prerelease)
		qp='&include=all'
		select_release='.[0] | select(.stable | not)'
		;;
	stable | '')
		select_release='.[0]'
		;;
	*)
		errexit 'Unknown release type. Must be "stable" (default) or "prerelease"\n'
		;;
	esac

	alwaysrun curl -sL "https://golang.org/dl/?mode=json${qp}" |
		alwaysrun jq -r "${select_release} | .files[] | ${select_file} | ${to_key_val}" |
		debug
}

#-----------------------------------------------------------------------------
# run runs a command if dry run mode is off, and prints that command to
# stderr if debug or dry run mode is on.
run() {
	if ((GETGO_DEBUG > 0 || GETGO_DRYRUN > 0)); then
		echo "$@" >&2
	fi
	if ((GETGO_DRYRUN > 0)); then
		return
	fi
	"$@"
}

# alwaysrun runs a command even if dry run mode is on.
alwaysrun() {
	if ((GETGO_DEBUG > 0 || GETGO_DRYRUN > 0)); then
		echo "$@" >&2
	fi
	"$@"
}

# debug sends stdin to stdout, and if debug mode is on, also sends stdin to
# stderr.
debug() {
	if ((GETGO_DEBUG > 0)); then
		tee /dev/stderr
	else
		cat
	fi
}

errexit() {
	# shellcheck disable=SC2059
	# We want the first arg to be a printf format string.
	printf "$@" >&2
	exit 1
}

#-----------------------------------------------------------------------------
# Only run main if executed as a script and not sourced.
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then main "$@"; fi
